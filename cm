#!/usr/bin/env tumblr_ruby
# stands for collins-modify
# perform actions on asset attribtues in collins easily

require 'collins_auth'
require 'yaml'
require 'optparse'

SUCCESS = "SUCCESS"
ERROR   = "ERROR"
options = {
  :query_size => 9999,
  :attributes => {},
  :delete_attributes => [],
}

OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options]"
  opts.on('-a','--set-attribute attribute:value',String,"Set attribute=value. : between key and value. attribute will be uppercased.") do |x|
    a,v = x.split(':')
    options[:attributes][a.upcase.to_sym] = v
  end
  opts.on('-d','--delete-attribute attribute',String,"Delete attribute.") {|v| options[:delete_attributes] << v.to_sym }
  opts.on('-t','--tags TAGS',Array,"Tags to work on, comma separated") {|v| options[:tags] = v.map(&:to_sym)}
  opts.on('-h','--help',"Help") {puts opts ; exit 0}
  opts.separator ""
  opts.separator "Examples:"
  opts.separator <<_EOF_
  Set an attribute on some hosts:
    #{$0} -t 001234,004567 -A my_attribute:true
  Delete an attribute on some hosts:
    #{$0} -t 001234,004567 -D my_attribute
  Read from stdin:
    cf -n develnode | #{$0} -D my_attribute
_EOF_
end.parse!


abort "You need to tell me to do _something_, see --help" if options[:attributes].empty? and options[:delete_attributes].empty?

if options[:tags].nil? or options[:tags].empty?
  # read tags from stdin. first field on the line is the tag
  input = $stdin.readlines
  options[:tags] = input.map{|l| l.split(/\s+/)[0] rescue nil}.compact.uniq
end

begin
  collins = Collins::Authenticator.setup_client
rescue => e
  abort "Unable to set up Collins client! #{e.message}"
end

exit_clean = true
options[:tags].each do |t|
  options[:attributes].each do |k,v|
    success,message = begin
      [collins.set_attribute!(t,k,v),nil]
    rescue => e
      [false,e.message]
    end
    exit_clean = success && exit_clean
    puts "#{success ? SUCCESS : ERROR}: #{t} set #{k}=#{v}#{message.nil? ? nil : " (%s)" % e.message}"
  end
  options[:delete_attributes].each do |k|
    success,message = begin
      [collins.delete_attribute!(t,k),nil]
    rescue => e
      [false,e.message]
    end
    exit_clean = success && exit_clean
    puts "#{success ? SUCCESS : ERROR}: #{t} delete #{k}#{message.nil? ? nil : " (%s)" % e.message}"
  end
end

exit exit_clean ? 0 : 1

