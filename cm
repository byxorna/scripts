#!/usr/bin/env tumblr_ruby
# stands for collins-modify
# perform actions on asset attribtues in collins easily

require 'collins_auth'
require 'yaml'
require 'optparse'

SUCCESS = "SUCCESS"
ERROR   = "ERROR"
valid_statuses = ["ALLOCATED","CANCELLED","DECOMMISSIONED","INCOMPLETE","MAINTENANCE","NEW","PROVISIONED","PROVISIONING","UNALLOCATED"]
valid_states = {
  "ALLOCATED" => ["CLAIMED","SPARE","RUNNING_UNMONITORED","UNMONITORED"],
  "MAINTENANCE" => ["AWAITING_REVIEW","HARDWARE_PROBLEM","HW_TESTING","HARDWARE_UPGRADE","IPMI_PROBLEM","MAINT_NOOP","NETWORK_PROBLEM","RELOCATION",'PROVISIONING_PROBLEM'],
  "ANY" => ["RUNNING","STARTING","STOPPING","TERMINATED"],
}
log_levels = Collins::Api::Logging::Severity.constants.map(&:to_s)

options = {
  :query_size => 9999,
  :attributes => {},
  :delete_attributes => [],
  :log_level => 'NOTE'
}

OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options]"
  opts.on('-a','--set-attribute attribute:value',String,"Set attribute=value. : between key and value. attribute will be uppercased.") do |x|
    a,v = x.split(':')
    options[:attributes][a.upcase.to_sym] = v
  end
  opts.on('-d','--delete-attribute attribute',String,"Delete attribute.") {|v| options[:delete_attributes] << v.to_sym }
  opts.on('-S','--set-status status[:state]',String,'Set status (and optionally state) to status:state. Requires --reason') do |v|
    status,state = v.split(':')
    options[:status] = status.upcase if not status.nil? and not status.empty?
    options[:state] = state.upcase if not state.nil? and not state.empty?
  end
  opts.on('-r','--reason REASON',String,"Reason for changing status/state.") {|v| options[:reason] = v }
  opts.on('-l','--log MESSAGE',String,"Create a log entry.") do |v|
    options[:log_message] = v
  end
  opts.on('-L','--level LEVEL',String, log_levels + log_levels.map(&:downcase),"Set log level. Default level is #{options[:log_level]}.") do |v|
    options[:log_level] = v.upcase
  end
  opts.on('-t','--tags TAGS',Array,"Tags to work on, comma separated") {|v| options[:tags] = v.map(&:to_sym)}
  opts.on('-h','--help',"Help") {puts opts ; exit 0}
  opts.separator ""
  opts.separator "Allowed values (uppercase or lowercase is accepted):"
  opts.separator <<_EOF_
  Status (-S,--set-status):
    #{valid_statuses.join(', ')}
  States (-S,--set-status):
    #{valid_states.keys.map {|k| "#{k} ->\n      #{valid_states[k].join(', ')}"}.join "\n    "}
  Log levels (-L,--level):
    #{log_levels.join(', ')}
_EOF_
  opts.separator ""
  opts.separator "Examples:"
  opts.separator <<_EOF_
  Set an attribute on some hosts:
    #{$0} -t 001234,004567 -a my_attribute:true
  Delete an attribute on some hosts:
    #{$0} -t 001234,004567 -d my_attribute
  Delete and add attribute at same time:
    #{$0} -t 001234,004567 -a new_attr:test -d old_attr
  Set machine into maintenace noop:
    #{$0} -t 001234 -S maintenance:maint_noop -r "I do what I want"
  Set machine back to allocated:
    #{$0} -t 001234 -S allocated:running -r "Back to allocated"
  Set machine back to new without setting state:
    #{$0} -t 001234 -S new -r "Dunno why you would want this"
  Create a log entry:
    #{$0} -t 001234 -l'computers are broken and everything is horrible' -Lwarning
  Read from stdin:
    cf -n develnode | #{$0} -d my_attribute
    cf -n develnode -S allocated | #{$0} -a collectd_version:5.2.1-52
    echo -e "001234\n001235\n001236"| #{$0} -a test_attribute:'hello world'
_EOF_
end.parse!


abort "You need to tell me to do _something_, see --help" if options[:attributes].empty? and options[:delete_attributes].empty? and options[:status].nil? and options[:log_message].nil?
abort "You need to provide a --reason when changing asset states!" if not options[:status].nil? and options[:reason].nil?
#TODO this is never checked because we are making option parser vet our options for levels. Catch OptionParser::InvalidArgument?
abort "Log level #{options[:log_level]} is invalid! Use one of #{log_levels.join(', ')}" unless Collins::Api::Logging::Severity.valid?(options[:log_level])

# if any statuses or states, validate them against allowed values
unless options[:status].nil?
  abort "Invalid status #{options[:status]} (Should be in #{valid_statuses.join(', ')})" unless valid_statuses.include? options[:status]
states_for_status = valid_states["ANY"].concat((valid_states[options[:status]].nil?) ? [] : valid_states[options[:status]])
  abort "State #{options[:state]} doesn't apply to status #{options[:status]} (Should be one of #{states_for_status.join(', ')})" unless options[:state].nil? or states_for_status.include?(options[:state])
end

if options[:tags].nil? or options[:tags].empty?
  # read tags from stdin. first field on the line is the tag
  input = $stdin.readlines
  options[:tags] = input.map{|l| l.split(/\s+/)[0] rescue nil}.compact.uniq
end

begin
  @collins = Collins::Authenticator.setup_client
rescue => e
  abort "Unable to set up Collins client! #{e.message}"
end

def api_call desc, method, *varargs
  success,message = begin
    [@collins.send(method,*varargs),nil]
  rescue => e
    [false,e.message]
  end
  puts "#{success ? SUCCESS : ERROR}: #{desc}#{message.nil? ? nil : " (%s)" % e.message}"
  success
end

exit_clean = true
options[:tags].each do |t|
  if options[:log_message]
    exit_clean = api_call("#{t} create #{options[:log_level].downcase} log #{options[:log_message].inspect}", :log!, t, options[:log_message], options[:log_level]) && exit_clean
  end
  options[:attributes].each do |k,v|
    exit_clean = api_call("#{t} set #{k}=#{v}", :set_attribute!, t, k, v) && exit_clean
  end
  options[:delete_attributes].each do |k|
    exit_clean = api_call("#{t} delete #{k}", :delete_attribute!, t, k) && exit_clean
  end
  if options[:status]
    exit_clean = api_call("#{t} set status to #{options[:status]}#{options[:state] ? ":#{options[:state]}" : ''}", :set_status!, t, :status => options[:status], :state => options[:state], :reason => options[:reason]) && exit_clean
  end
end

exit exit_clean ? 0 : 1

