#!/usr/bin/env tumblr_ruby
# Stands for collins-ssh-root
# Fetch root credentials from collins for a given server
# then log into it via ssh (without requiring keys to be set up)

require 'collins_auth'
require 'yaml'
require 'optparse'

@options = {
  :password_attr => :system_password,
  :timeout => 10,
}

OptionParser.new do |opts|
  opts.banner = "#{$0}: Connects to assets over SSH as root with creds from collins"
  opts.separator "Usage: #{$0} [hostname]|[-t 001234]"
  opts.on('-t','--tag TAG',String,'SSH to the asset with TAG') {|v| @options[:tag] = v}
  opts.on('-p','--attribute ATTR',String,"Use collins attribute ATTR (Default: #{@options[:password_attr]})") {|v| @options[:password_attr] = v.to_sym}
  opts.on('-h','--help','Show help message') { puts opts ; exit 0 }
end.parse!

@options[:hostname] = ARGV.shift

abort "Give me a hostname or tag to connect to" if @options[:hostname].nil? and @options[:tag].nil?

begin
  collins = Collins::Authenticator.setup_client timeout: @options[:timeout]
rescue => e
  abort "Unable to set up collins client! #{e.message}"
end

begin
  node = if @options[:tag].nil?
    assets = collins.find(:hostname => @options[:hostname], :details => true)
    raise "More than 1 node found like #{@options[:hostname]} (found #{assets.length}). Please be more specific...\n#{assets.map {|a| a.hostname}.join "\n"}\n" if assets.length > 1
    raise "No assets found matching #{@options[:hostname]}" if assets.empty?
    assets.first
  else
    node = collins.get(@options[:tag])
    raise "No asset found with tag #{@options[:tag]}" if node.nil?
    node
  end
rescue => e
  abort "Error querying collins: #{e.message}"
end

puts "Connecting to #{node.hostname} as root..."

# set the password in the env instead of letting it sit on the command line
ENV['SYSTEM_P'] = node.send(@options[:password_attr])
ENV['SYSTEM_H'] = node.hostname

exec <<_EXPECT_
/usr/bin/expect -c '
spawn -noecho /usr/bin/ssh -t -oUserKnownHostsFile=/dev/null -lroot "$env(SYSTEM_H)"
expect {
  "Are you sure you want to continue connecting (yes/no)?" {
    send "yes\\r"
    expect {
      "s password:" { send "$env(SYSTEM_P)\\r" }
      default { exit 1 }
    }
  }
  default {
    exit 1
  }
}
interact
'
_EXPECT_

