#!/usr/bin/env tumblr_ruby
# stands for collins-find
# look up hosts quickly from collins from the CLI

require 'collins_auth'
require 'yaml'
require 'optparse'

# this gets stuffed into the collins find call
query_opts = {
  :operation => 'AND',
  :size => 9999,
}
# these are all the attributes we search for
# may be converted into a CQL query
search_attrs = { }
options = {
  :separator => "\t",
  :attributes => {},            # additional attributes to query for
  :columns => [:tag, :hostname, :nodeclass, :status, :pool, :primary_role, :secondary_role],
  :timeout => 10,               # default in collins_client library
}

#selector_keys = [:nodeclass, :pool, :hostname, :primary_role, :secondary_role, :status, :hardware_product, :tag]

OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options] [hostnamepattern]"
  opts.separator "Query options:"
  opts.on('-t','--tag TAG[,...]',Array, "Assets with tag[s] TAG") do |v|
    search_attrs[:tag] = (v.length == 1) ? v.first : v
  end
  opts.on('-n','--nodeclass NODECLASS[,...]',Array, "Assets in nodeclass NODECLASS") {|v| search_attrs[:nodeclass] = v}
  opts.on('-p','--pool POOL[,...]',Array, "Assets in pool POOL") {|v| search_attrs[:pool] = v}
  opts.on('-s','--size SIZE',Integer, "Number of assets to return (Default: #{query_opts[:size]})") {|v| query_opts[:size] = v}
  opts.on('-r','--role ROLE[,...]',Array,"Assets in primary role ROLE") {|v| search_attrs[:primary_role] = v}
  opts.on('-R','--secondary-role ROLE[,...]',Array,"Assets in secondary role ROLE") {|v| search_attrs[:secondary_role] = v}
  opts.on('-H','--hardware-product PRODUCT[,...]',Array,"Assets with formal product model PRODUCT") {|v| search_attrs[:hardware_product] = v}
  opts.on('-S','--status STATUS[,...]',Array,"Asset Status") {|v| search_attrs[:status] = v}
  opts.on('-a','--attribute attribute:value[,...]',String,"Arbitrary attributes and values to match in query. : between key and value") do |x|
    x.split(',').each do |p|
      a,v = p.split(':')
      a = a.to_sym
      if not search_attrs[a].nil? and not search_attrs[a].is_a? Array
        # its a single value, turn it into an array
        search_attrs[a] = [search_attrs[a]]
      end
      if search_attrs[a].is_a? Array
        # already multivalue, append
        search_attrs[a] << v
      else
        search_attrs[a] = v
      end
    end
  end
  opts.separator "Formatting/extra options:"
  opts.on('-c','--columns ATTRIBUTES',Array,"Attributes to output as columns, comma separated (Default: #{options[:columns].map(&:to_s).join(',')})") {|v| options[:columns] = v.map(&:to_sym)}
  opts.on('-x','--extra-columns ATTRIBUTES',Array,"Additional attributes to add to output as columns, comma separated") {|v| options[:columns].push(v.map(&:to_sym)).flatten! }
  opts.on('-f','--field-separator SEPARATOR',String,"Separator between columns in output (Default: #{options[:separator]})") {|v| options[:separator] = v}
  opts.on('--expire SECONDS',Integer,"Timeout in seconds (0 == forever)") {|v| options[:timeout] = v}
  opts.on('-h','--help',"Help") {puts opts ; exit 0}

  opts.separator <<_EXAMPLES_
Examples:
    Query for devnodes in DEVEL pool that are VMs
      cf -n develnode -p DEVEL
    Query for asset 001234, and show its system_password
      cf -t 001234 -x system_password
    Query for all decommissioned VM assets
      cf -a is_vm:true -S decommissioned
    Query for hosts matching hostname 'web6-'
      cf web6-
_EXAMPLES_
end.parse!

# hostname is the final option, no flags
search_attrs[:hostname] = ARGV.shift

# if nothing passed to us, lets not search for EVERYTHING
#abort "You need to query for _something_, see --help" if
#  selector_keys.all? {|key| options[key].nil?} and options[:attributes].empty?

# for any search attributes, lets not pass arrays of 1 element
# as that will confuse as_query?
search_attrs.each do |k,v|
  if v.is_a? Array and v.length == 1
    search_attrs[k] = v.first
  end
end

def as_query?(attrs)
  attrs.any?{|k,v| v.is_a? Array}
end

def convert_to_query(op, attrs)
  attrs.map do |k,v|
    next if v.nil?
    if v.is_a? Array
      "(" + v.map{|x| "#{k} = #{x}"}.join(' OR ') + ")"
    else
      "#{k} = #{v}"
    end
  end.compact.join(" #{op} ")
end

# merge search_attrs into query
if as_query?(search_attrs)
  #puts "Query: #{query_opts[:query]}"
  query_opts[:query] = convert_to_query(query_opts[:operation],search_attrs)
else
  query_opts.merge!(search_attrs)
end

begin
  collins = Collins::Authenticator.setup_client timeout: options[:timeout]
rescue => e
  abort "Unable to set up Collins client! #{e.message}"
end

begin
  assets = collins.find(query_opts)
  if assets.length > 0
    assets.each do |a|
      puts options[:columns].map {|t| (t == :state) ?  a.send(t).label : a.send(t)}.join(options[:separator])
    end
  else
    abort "No assets found"
  end
rescue => e
  abort "Error querying collins: #{e.message}"
end

