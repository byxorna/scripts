#!/usr/bin/env tumblr_ruby
# stands for collins-find
# look up hosts quickly from collins from the CLI

require 'collins_client'
require 'yaml'
require 'optparse'

options = {
  :collins_config_file => "/var/db/collins.yaml",
  :query_size => 9999
}

OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options] [hostpattern]"
  opts.on('-c','--config FILE',String,"Specify collins config (Default: #{options[:collins_config_file]})") {|v| options[:collins_config_file] = v}
  opts.on('-n','--nodeclass NODECLASS',String,"Specify a nodeclass to search for") {|v| options[:nodeclass] = v}
  opts.on('-p','--pool POOL',String,"Specify a pool to search for") {|v| options[:pool] = v}
  opts.on('-s','--size SIZE',Integer,"Number of assets to return") {|v| options[:query_size] = v}
  opts.on('-r','--role ROLE',String,"Role of machine") {|v| options[:role] = v}
  opts.on('-h','--help',"Help") {puts opts ; exit 0}
end.parse!

# hostname is the final option, no flags
options[:hostname] = ARGV.shift

# if nothing passed to us, lets not search for EVERYTHING
abort "You need to query for _something_, see --help" if options[:hostname].nil? and options[:pool].nil? and options[:nodeclass].nil? and options[:role].nil?

c = YAML.load_file(options[:collins_config_file]).reduce({}){|memo,(k,v)| memo[k.to_sym] = v ; memo}
c = c[:collins] if c.key? :collins
c[:host] = "https://collins.#{c[:environment]}.tumblr.net"
options[:collins_config] = c

collins = Collins::Client.new options[:collins_config]

query_opts = {
  :operation => 'AND',
  :size => options[:query_size],
  :nodeclass => options[:nodeclass],
  :pool => options[:pool],
  :hostname => options[:hostname]
}
query_opts[:primary_role] = options[:role] if options[:role]
query_opts[:secondary_role] = options[:role2] if options[:role2]

assets = collins.find(query_opts)
if assets.length > 0
  assets.each {|a| puts "#{a.tag}\t#{a.hostname}\t#{a.nodeclass}\t#{a.status}\t#{a.pool}\t#{a.primary_role}\t#{a.secondary_role}"}
else
  $stderr.puts "No assets found"
  exit 1
end

