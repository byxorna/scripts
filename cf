#!/usr/bin/env tumblr_ruby
# stands for collins-find
# look up hosts quickly from collins from the CLI

require 'collins_auth'
require 'yaml'
require 'json'
require 'optparse'

#TODO: querying for :status or :state with -a status:maintenance doesnt play nice with -Smaintenance,allocated
#TODO: we construct the query for states and statuses only from the parameters to --status (ignoring any -a attributes)
#TODO: add a formatting option to display the assets in a different way (not a table)

# this gets stuffed into the collins find call
query_opts = {
  :operation => 'AND',
  :size => 9999,
}
# these are all the attributes we search for
# may be converted into a CQL query
search_attrs = { }
options = {
  :display => :table,           # how to display the results
  :separator => "\t",
  :attributes => {},            # additional attributes to query for
  :columns => [:tag, :hostname, :nodeclass, :status, :pool, :primary_role, :secondary_role],
  :column_override => [],       # if set, these are the columns to display
  :timeout => 10,               # default in collins_client library
  :show_header => false,        # if the header for columns should be displayed
}

#selector_keys = [:nodeclass, :pool, :hostname, :primary_role, :secondary_role, :status, :hardware_product, :tag]

OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options] [hostnamepattern]"
  opts.separator "Query options:"
  opts.on('-t','--tag TAG[,...]',Array, "Assets with tag[s] TAG") {|v| search_attrs[:tag] = v}
  opts.on('-n','--nodeclass NODECLASS[,...]',Array, "Assets in nodeclass NODECLASS") {|v| search_attrs[:nodeclass] = v}
  opts.on('-p','--pool POOL[,...]',Array, "Assets in pool POOL") {|v| search_attrs[:pool] = v}
  opts.on('-s','--size SIZE',Integer, "Number of assets to return (Default: #{query_opts[:size]})") {|v| query_opts[:size] = v}
  opts.on('-r','--role ROLE[,...]',Array,"Assets in primary role ROLE") {|v| search_attrs[:primary_role] = v}
  opts.on('-R','--secondary-role ROLE[,...]',Array,"Assets in secondary role ROLE") {|v| search_attrs[:secondary_role] = v}
  opts.on('-S','--status STATUS[:STATE][,...]',Array,"Asset status (and optional state after :)") do |v|
    # in order to know what state was paired with what status, lets store the original params
    # so the query constructor can create the correct CQL query
    options[:status_state] = v
    search_attrs[:status], search_attrs[:state] = v.inject([[],[]]) do |memo,s|
      status,state = s.split(':')
      memo[0] << status.upcase if not status.nil? and not status.empty?
      memo[1] << state.upcase if not state.nil? and not state.empty?
      memo
    end
  end
  opts.on('-a','--attribute attribute[:value[,...]]',String,"Arbitrary attributes and values to match in query. : between key and value") do |x|
    x.split(',').each do |p|
      a,v = p.split(':')
      a = a.to_sym
      if not search_attrs[a].nil? and not search_attrs[a].is_a? Array
        # its a single value, turn it into an array
        search_attrs[a] = [search_attrs[a]]
      end
      if search_attrs[a].is_a? Array
        # already multivalue, append
        search_attrs[a] << v
      else
        search_attrs[a] = v
      end
    end
  end
  opts.separator "Table formatting:"
  opts.on('-H','--show-header',"Show header fields in output") {options[:show_header] = true}
  opts.on('-c','--columns ATTRIBUTES',Array,"Attributes to output as columns, comma separated (Default: #{options[:columns].map(&:to_s).join(',')})") {|v| options[:column_override] = v.map(&:to_sym)}
  opts.on('-x','--extra-columns ATTRIBUTES',Array,"Show these columns in addition to the default columns, comma separated") {|v| options[:columns].push(v.map(&:to_sym)).flatten! }
  opts.on('-f','--field-separator SEPARATOR',String,"Separator between columns in output (Default: #{options[:separator]})") {|v| options[:separator] = v}

  opts.separator "Robot formatting:"
  opts.on('-j','--json',"Output results in JSON (NOTE: This probably wont be what you expected)") {options[:display] = :json}
  opts.on('-y','--yaml',"Output results in YAML") {options[:display] = :yaml}

  opts.separator "Extra options:"
  opts.on('--expire SECONDS',Integer,"Timeout in seconds (0 == forever)") {|v| options[:timeout] = v}
  opts.on('-h','--help',"Help") {puts opts ; exit 0}

  opts.separator <<_EXAMPLES_
Examples:
    Query for devnodes in DEVEL pool that are VMs
      cf -n develnode -p DEVEL
    Query for asset 001234, and show its system_password
      cf -t 001234 -x system_password
    Query for all decommissioned VM assets
      cf -a is_vm:true -S decommissioned
    Query for hosts matching hostname '^web6-'
      cf ^web6-
    Query for all develnode6 nodes with a value for PUPPET_SERVER
      cf -n develnode6 -a puppet_server -H
_EXAMPLES_
end.parse!

# hostname is the final option, no flags
search_attrs[:hostname] = ARGV.shift
# fix bug where assets wont get found if they dont have that meta attribute
search_attrs.delete(:hostname) if search_attrs[:hostname].nil?

# if nothing passed to us, lets not search for EVERYTHING
#abort "You need to query for _something_, see --help" if
#  selector_keys.all? {|key| options[key].nil?} and options[:attributes].empty?

# for any search attributes, lets not pass arrays of 1 element
# as that will confuse as_query?
search_attrs.each do |k,v|
  if v.is_a? Array
    search_attrs[k] = v.first if v.length == 1
    search_attrs[k] = nil if v.empty?
  end
end

def as_query?(attrs)
  attrs.any?{|k,v| v.is_a? Array}
end

def convert_to_query(op, attrs, options)
  # we want to support being able to query -Smaintenance:noop,:running,:provisioning_problem
  # and not have the states ored together. Handle status/state pairs separately
  basic_query = attrs.reject {|k,v| [:status,:state].include?(k)}.map do |k,v|
    next if v.nil?
    if v.is_a? Array
      "(" + v.map{|x| "#{k} = #{x}"}.join(' OR ') + ")"
    else
      "#{k} = #{v}"
    end
  end.compact.join(" #{op} ")
  # because they are provided in pairs, lets handle them together
  # create the (( STATUS = maintenance AND STATE = noop) OR (STATE = provisioning_problem)) query
  status_query = options[:status_state].flat_map do |ss|
    h = {}
    h[:status], h[:state] = ss.split(':')
    h[:status] = nil if h[:status].nil? or h[:status].empty?
    h[:state] = nil if h[:state].nil? or h[:state].empty?
    "( " + h.map {|k,v| v.nil? ? nil : "#{k.to_s.upcase} = #{v}"}.compact.join(" AND ") + " )"
  end.compact.join(' OR ')
  [basic_query,"( #{status_query} )"].reject {|q| q.nil? or q.empty?}.join(" #{op} ")
end

def display_as_robot_talk(assets, format = :json)
  puts assets.send("to_#{format}".to_sym)
end
def display_as_table(assets, columns, separator, show_header = false)
  # lets figure out how wide each column is, including header
  column_width_pairs = columns.map do |column|
    # grab all attributes == column and figure out max width
    width = assets.map{|a| (column == :state) ?  a.send(column).label.to_s.length : a.send(column).to_s.length}.max
    width = [width, column.to_s.length].max if show_header
    [column,width]
  end
  column_width_map = Hash[column_width_pairs]

  if show_header
    $stderr.puts column_width_map.map{|c,w| "%-#{w}s" % c}.join(separator)
  end
  assets.each do |a|
    puts column_width_map.map {|c,w| v = (c == :state) ?  a.send(c).label : a.send(c) ; "%-#{w}s" % v }.join(separator)
  end

end

# merge search_attrs into query
if as_query?(search_attrs)
  query_opts[:query] = convert_to_query(query_opts[:operation],search_attrs, options)
  #puts "Query: #{query_opts[:query]}"
else
  query_opts.merge!(search_attrs)
end

begin
  collins = Collins::Authenticator.setup_client timeout: options[:timeout]
rescue => e
  abort "Unable to set up Collins client! #{e.message}"
end

begin
  assets = collins.find(query_opts)
  if assets.length > 0
    case options[:display]
    when :table
      # if the user passed :column_override, respect that absolutely. otherwise, the columns to display
      # should be options[:columns] + any extra attributes queried for. this way ```cf -c hostname -a is_vm:true```
      # wont return 2 columns; only the one you asked for
      columns = if options[:column_override].empty?
                  options[:columns].concat(search_attrs.keys).compact.uniq
                else
                  options[:column_override]
                end
      display_as_table(assets,columns,options[:separator],options[:show_header])
    when :json,:yaml
      display_as_robot_talk(assets,options[:display])
    else
      abort "I don't know how to display assets in #{options[:display]} format!"
    end
  else
    abort "No assets found"
  end
rescue => e
  abort "Error querying collins: #{e.message}"
end

